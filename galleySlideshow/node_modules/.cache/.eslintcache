[{"/Users/satyam/Desktop/hdoc/galleySlideshow/src/index.js":"1","/Users/satyam/Desktop/hdoc/galleySlideshow/src/App.js":"2","/Users/satyam/Desktop/hdoc/galleySlideshow/src/pages/Home.jsx":"3","/Users/satyam/Desktop/hdoc/galleySlideshow/src/pages/SlideShow.jsx":"4","/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/Navbar.jsx":"5","/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/Gallery.jsx":"6","/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/layout/ImageModal.jsx":"7","/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/layout/ViewImagebutton.jsx":"8"},{"size":233,"mtime":1652089697473,"results":"9","hashOfConfig":"10"},{"size":493,"mtime":1652272613201,"results":"11","hashOfConfig":"10"},{"size":239,"mtime":1652266888881,"results":"12","hashOfConfig":"10"},{"size":4301,"mtime":1656238758275,"results":"13","hashOfConfig":"10"},{"size":341,"mtime":1655461590267,"results":"14","hashOfConfig":"10"},{"size":1061,"mtime":1655221034055,"results":"15","hashOfConfig":"10"},{"size":628,"mtime":1656238043807,"results":"16","hashOfConfig":"10"},{"size":296,"mtime":1655462143797,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w7fy2k",{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/satyam/Desktop/hdoc/galleySlideshow/src/index.js",[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/App.js",[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/pages/Home.jsx",[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/pages/SlideShow.jsx",["44","45"],[],"import { useState, useEffect } from \"react\";\nimport Navbar from \"../components/Navbar\";\nimport { useParams } from \"react-router-dom\";\nimport { ViewImageButton } from \"../components/layout/ViewImagebutton\";\nimport { ImageModal } from \"../components/layout/ImageModal\";\nfunction SlideShow() {\n  const [gallery, setGallery] = useState([]);\n  const { name } = useParams();\n  const [scrollPos, setScrollPos] = useState(true);\n  const [openModal, setOpenModal] = useState(false);\n  const fetchData = async () => {\n    const response = await fetch(\"/data.json\");\n    const data = await response.json();\n\n    setGallery(data.filter((item) => item.name === name));\n  };\n  useEffect(() => {\n    fetchData();\n    // animating navbar on scroll\n    let oldValue = 0;\n    let newValue = 0;\n    // function for updating checking scroll direction is negative or postive.\n    const scrollUpdate = (e) => {\n      newValue = window.pageYOffset;\n      if (oldValue < newValue) {\n        setScrollPos(false);\n      } else if (oldValue > newValue) {\n        setScrollPos(true);\n      }\n      oldValue = newValue;\n    };\n    // listener\n    window.addEventListener(\"scroll\", scrollUpdate);\n  }, []);\n\n  // Effect for closing image-modal when Esc-key pressed.\n  useEffect(() => {\n    const getEscKey = (e) => {\n      if (e.key === \"Escape\") {\n        setOpenModal(false);\n      }\n    };\n    if (openModal) {\n      console.log(\"this\");\n\n      window.addEventListener(\"keydown\", getEscKey);\n    }\n\n    return window.addEventListener(\"keydown\", getEscKey);\n  }, [openModal]);\n  return (\n    <>\n      {openModal && (\n        <ImageModal\n          img={gallery[0]?.images?.gallery}\n          setOpenModal={setOpenModal}\n        />\n      )}\n\n      <div className=\"single-gallery\">\n        <Navbar scrollPos={scrollPos}></Navbar>\n        <main className=\"container\">\n          {gallery.map((item, index) => {\n            const { name, artist, images, description, year } = item;\n            return (\n              <>\n                <div key={index} className=\"container__info grid\">\n                  <div className=\"container__info__hero-img--wrapper\">\n                    <img\n                      onClick={() => setOpenModal(true)}\n                      className=\"container__info__hero-img\"\n                      src={images.gallery}\n                      alt={name}\n                    />\n                    <ViewImageButton></ViewImageButton>\n                  </div>\n\n                  <div className=\"container__info__brief\">\n                    <div className=\"container__info__brief--container\">\n                      <h2 className=\"container__info__brief--name\">{name}</h2>\n                      <p className=\"container__info__brief--artist capitalize \">\n                        {artist.name}\n                      </p>\n                    </div>\n\n                    <img\n                      className=\"container__info__brief--artist-image\"\n                      src={artist.image}\n                      alt={artist.name}\n                    />\n                  </div>\n                </div>{\" \"}\n                <div className=\"container__body\">\n                  <p className=\"container__year\">{year}</p>\n                  <p className=\"container__content\">{description}</p>\n                  <a href=\"\" className=\"source-link lt-spacing-1 uppercase\">\n                    <span>Go to source</span>\n                  </a>\n                </div>\n              </>\n            );\n          })}\n        </main>\n        <div className=\"slideshow_handle flex sp-bw\">\n          <div className=\"progress\"></div>\n          <div className=\"slideshow__handle__info\">\n            <h2 className=\"slideshow__handle__info__name\">{name}</h2>\n            <p className=\"slideshow__handle__info__artist\">\n              {gallery[0]?.artist?.name}\n            </p>\n          </div>\n          <div className=\"slideshow__handle__btns\">\n            <button className=\"slideshow__handle__btns__prev\">\n              <img src=\"/assets/shared/icon-back-button.svg\" alt=\"\" />\n            </button>\n            <button className=\"slideshow__handle__btns__next\">\n              <img src=\"/assets/shared/icon-next-button.svg\" alt=\"\" />\n            </button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SlideShow;\n","/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/Navbar.jsx",[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/Gallery.jsx",[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/layout/ImageModal.jsx",[],[],[],"/Users/satyam/Desktop/hdoc/galleySlideshow/src/components/layout/ViewImagebutton.jsx",["46"],[],{"ruleId":"47","severity":1,"message":"48","line":34,"column":6,"nodeType":"49","endLine":34,"endColumn":8,"suggestions":"50"},{"ruleId":"51","severity":1,"message":"52","line":96,"column":19,"nodeType":"53","endLine":96,"endColumn":77},{"ruleId":"54","severity":1,"message":"55","line":7,"column":9,"nodeType":"53","endLine":7,"endColumn":74},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchData'. Either include it or remove the dependency array.","ArrayExpression",["56"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",{"desc":"57","fix":"58"},"Update the dependencies array to be: [fetchData]",{"range":"59","text":"60"},[1172,1174],"[fetchData]"]